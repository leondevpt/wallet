// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: trx.proto

package trxv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrxServiceClient is the client API for TrxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrxServiceClient interface {
	GetTrxBalance(ctx context.Context, in *GetTrxBalanceRequest, opts ...grpc.CallOption) (*GetTrxBalanceReply, error)
	GetTRC20TokenBalance(ctx context.Context, in *GetTRC20TokenBalanceRequest, opts ...grpc.CallOption) (*GetTRC20TokenBalanceReply, error)
}

type trxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrxServiceClient(cc grpc.ClientConnInterface) TrxServiceClient {
	return &trxServiceClient{cc}
}

func (c *trxServiceClient) GetTrxBalance(ctx context.Context, in *GetTrxBalanceRequest, opts ...grpc.CallOption) (*GetTrxBalanceReply, error) {
	out := new(GetTrxBalanceReply)
	err := c.cc.Invoke(ctx, "/trxv1.TrxService/GetTrxBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trxServiceClient) GetTRC20TokenBalance(ctx context.Context, in *GetTRC20TokenBalanceRequest, opts ...grpc.CallOption) (*GetTRC20TokenBalanceReply, error) {
	out := new(GetTRC20TokenBalanceReply)
	err := c.cc.Invoke(ctx, "/trxv1.TrxService/GetTRC20TokenBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrxServiceServer is the server API for TrxService service.
// All implementations must embed UnimplementedTrxServiceServer
// for forward compatibility
type TrxServiceServer interface {
	GetTrxBalance(context.Context, *GetTrxBalanceRequest) (*GetTrxBalanceReply, error)
	GetTRC20TokenBalance(context.Context, *GetTRC20TokenBalanceRequest) (*GetTRC20TokenBalanceReply, error)
	mustEmbedUnimplementedTrxServiceServer()
}

// UnimplementedTrxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrxServiceServer struct {
}

func (UnimplementedTrxServiceServer) GetTrxBalance(context.Context, *GetTrxBalanceRequest) (*GetTrxBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrxBalance not implemented")
}
func (UnimplementedTrxServiceServer) GetTRC20TokenBalance(context.Context, *GetTRC20TokenBalanceRequest) (*GetTRC20TokenBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTRC20TokenBalance not implemented")
}
func (UnimplementedTrxServiceServer) mustEmbedUnimplementedTrxServiceServer() {}

// UnsafeTrxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrxServiceServer will
// result in compilation errors.
type UnsafeTrxServiceServer interface {
	mustEmbedUnimplementedTrxServiceServer()
}

func RegisterTrxServiceServer(s grpc.ServiceRegistrar, srv TrxServiceServer) {
	s.RegisterService(&TrxService_ServiceDesc, srv)
}

func _TrxService_GetTrxBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrxBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).GetTrxBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trxv1.TrxService/GetTrxBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).GetTrxBalance(ctx, req.(*GetTrxBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrxService_GetTRC20TokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTRC20TokenBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrxServiceServer).GetTRC20TokenBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trxv1.TrxService/GetTRC20TokenBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrxServiceServer).GetTRC20TokenBalance(ctx, req.(*GetTRC20TokenBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrxService_ServiceDesc is the grpc.ServiceDesc for TrxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trxv1.TrxService",
	HandlerType: (*TrxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrxBalance",
			Handler:    _TrxService_GetTrxBalance_Handler,
		},
		{
			MethodName: "GetTRC20TokenBalance",
			Handler:    _TrxService_GetTRC20TokenBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trx.proto",
}
